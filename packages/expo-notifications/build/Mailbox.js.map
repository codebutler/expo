{"version":3,"file":"Mailbox.js","sourceRoot":"","sources":["../src/Mailbox.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,YAAY,IAAI,kBAAkB,EAAE,kBAAkB,EAAE,MAAM,kBAAkB,CAAC;AAW1F,MAAM,EAAE,iBAAiB,EAAE,GAAG,kBAAkB,CAAC;AACjD,MAAM,kBAAkB,GAAG,IAAI,kBAAkB,CAAC,iBAAiB,CAAC,CAAC;AAErE,MAAM,OAAO,OAAO;IAMlB;QAFQ,WAAM,GAAW,CAAC,CAAC;QAGzB,IAAI,CAAC,0BAA0B,GAAG,IAAI,GAAG,EAAE,CAAC;QAC5C,IAAI,CAAC,iCAAiC,GAAG,IAAI,GAAG,EAAE,CAAC;QACnD,IAAI,CAAC,qBAAqB,GAAG,IAAI,CAAC;QAClC,kBAAkB,CAAC,WAAW,CAC5B,wBAAwB,EACxB,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,IAAI,CAAC,CAClC,CAAC;QACF,kBAAkB,CAAC,WAAW,CAC5B,+BAA+B,EAC/B,IAAI,CAAC,wBAAwB,CAAC,IAAI,CAAC,IAAI,CAAC,CACzC,CAAC;QACF,kBAAkB,CAAC,WAAW,CAC5B,oBAAoB,EACpB,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,CAC9B,CAAC;IACJ,CAAC;IAED,SAAS;QACP,OAAO,IAAI,CAAC,MAAM,EAAE,CAAC;IACvB,CAAC;IAED,kBAAkB,CAAI,EAAU,EAAE,GAAmB;QACnD,OAAO;YACL,MAAM;gBACJ,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;YACjB,CAAC;SACF,CAAC;IACJ,CAAC;IAED,4BAA4B,CAAC,QAAmC;QAC9D,MAAM,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC;QACvB,IAAI,CAAC,0BAA0B,CAAC,GAAG,CAAC,EAAE,EAAE,QAAQ,CAAC,CAAC;QAClD,OAAO,IAAI,CAAC,kBAAkB,CAA4B,EAAE,EAAE,IAAI,CAAC,0BAA0B,CAAC,CAAC;IACjG,CAAC;IAED,mCAAmC,CAAC,QAA0C;QAC5E,MAAM,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC;QACvB,IAAI,CAAC,iCAAiC,CAAC,GAAG,CAAC,EAAE,EAAE,QAAQ,CAAC,CAAC;QACzD,OAAO,IAAI,CAAC,kBAAkB,CAAmC,EAAE,EAAE,IAAI,CAAC,iCAAiC,CAAC,CAAC;IAC/G,CAAC;IAED,wBAAwB,CAAC,oBAA2C;QAClE,IAAI,CAAC,qBAAqB,GAAG,oBAAoB,CAAC;IACpD,CAAC;IAEO,KAAK,CAAC,wBAAwB,CAAC,YAAoC;QACzE,KAAK,IAAI,QAAQ,IAAI,IAAI,CAAC,iCAAiC,CAAC,MAAM,EAAE,EAAE;YACpE,MAAM,QAAQ,CAAC,YAAY,CAAC,CAAC;SAC9B;IACH,CAAC;IAEO,KAAK,CAAC,iBAAiB,CAAC,eAAgC;QAC9D,KAAK,IAAI,QAAQ,IAAI,IAAI,CAAC,0BAA0B,CAAC,MAAM,EAAE,EAAE;YAC7D,MAAM,QAAQ,CAAC,eAAe,CAAC,CAAC;SACjC;IACH,CAAC;IAEO,KAAK,CAAC,aAAa,CAAC,YAA0B;QACpD,IAAI,IAAI,CAAC,qBAAqB,IAAI,IAAI,EAAE;YACtC,MAAM,IAAI,CAAC,qBAAqB,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;SACtD;IACH,CAAC;CACF","sourcesContent":["import { EventEmitter as NativeEventEmitter, NativeModulesProxy } from '@unimodules/core';\nimport {\n  ForegroundNotification,\n  OnUserInteractionListener,\n  OnForegroundNotificationListener,\n  UserInteraction,\n  OnTokenChangeListener,\n  TokenMessage,\n  Subscription,\n} from './Notifications.types';\n\nconst { ExpoNotifications } = NativeModulesProxy;\nconst DeviceEventEmitter = new NativeEventEmitter(ExpoNotifications);\n\nexport class Mailbox {\n  private onUserInteractionListeners: Map<number, OnUserInteractionListener>;\n  private onForegroundNotificationListeners: Map<number, OnForegroundNotificationListener>;\n  private onTokenChangeListener: OnTokenChangeListener | null;\n  private lastId: number = 0; \n\n  constructor() {\n    this.onUserInteractionListeners = new Map();\n    this.onForegroundNotificationListeners = new Map();\n    this.onTokenChangeListener = null;\n    DeviceEventEmitter.addListener(\n      'Expo.onUserInteraction',\n      this.onUserInteraction.bind(this)\n    );\n    DeviceEventEmitter.addListener(\n      'Expo.onForegroundNotification',\n      this.onForegroundNotification.bind(this)\n    );\n    DeviceEventEmitter.addListener(\n      'Expo.onTokenChange',\n      this.onTokenChange.bind(this)\n    );\n  }\n\n  getNextId(): number {\n    return this.lastId++;\n  }\n\n  createSubscription<T>(id: number, map: Map<number, T>): Subscription {\n    return {\n      remove(): void {\n        map.delete(id);\n      }\n    };\n  }\n\n  addOnUserInteractionListener(listener: OnUserInteractionListener): Subscription {\n    const id = this.lastId;\n    this.onUserInteractionListeners.set(id, listener);\n    return this.createSubscription<OnUserInteractionListener>(id, this.onUserInteractionListeners);\n  }\n\n  addOnForegroundNotificationListener(listener: OnForegroundNotificationListener): Subscription {\n    const id = this.lastId;\n    this.onForegroundNotificationListeners.set(id, listener);\n    return this.createSubscription<OnForegroundNotificationListener>(id, this.onForegroundNotificationListeners);\n  }\n\n  setOnTokenChangeListener(onTokenChangeListner: OnTokenChangeListener): void {\n    this.onTokenChangeListener = onTokenChangeListner;\n  }\n\n  private async onForegroundNotification(notification: ForegroundNotification) {\n    for (let listener of this.onForegroundNotificationListeners.values()) {\n      await listener(notification);\n    }\n  }\n\n  private async onUserInteraction(userInteraction: UserInteraction) {\n    for (let listener of this.onUserInteractionListeners.values()) {\n      await listener(userInteraction);\n    }\n  }\n\n  private async onTokenChange(tokenMessage: TokenMessage) {\n    if (this.onTokenChangeListener != null) {\n      await this.onTokenChangeListener(tokenMessage.token);\n    }\n  }\n}\n"]}