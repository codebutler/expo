{"version":3,"file":"Notifications.types.js","sourceRoot":"","sources":["../src/Notifications.types.ts"],"names":[],"mappings":"","sourcesContent":["export type Notification = {\n  title: string;\n  body?: string;\n  data?: any;\n  categoryId?: string;\n  ios?: {\n    sound?: boolean;\n    _displayInForeground?: boolean;\n  };\n  android?: {\n    channelId?: string;\n    icon?: string;\n    sticky?: boolean;\n    link?: string;\n    exact?: boolean;\n  };\n  web?: NotificationOptions;\n};\n\nexport type ForegroundNotification = Notification & {\n  remote: boolean;\n};\n\nexport type Channel = {\n  name: string;\n  description?: string;\n  priority?: number;\n  sound?: boolean;\n  vibrate?: boolean | number[];\n  badge?: boolean;\n};\n\nexport type ActionType = {\n  actionId: string;\n  buttonTitle: string;\n  isDestructive?: boolean;\n  isAuthenticationRequired?: boolean;\n  doNotOpenInForeground?: boolean;\n  textInput?: {\n    submitButtonTitle: string;\n    placeholder: string;\n  };\n};\n\nexport type UserInteraction = Notification & {\n    actionId?: string;\n    userText?: string;\n    remote?: boolean;\n}\n\nexport type TokenMessage = {\n  token: string;\n}\n\nexport type Subscription = {\n  remove: () => void;\n}\n\nexport type OnUserInteractionListener = (userInteraction: UserInteraction) => Promise<void>;\n\nexport type OnForegroundNotificationListener = (notification: ForegroundNotification) => Promise<void>;\n\nexport type OnTokenChangeListener = (token: string) => Promise<void>;\n"]}